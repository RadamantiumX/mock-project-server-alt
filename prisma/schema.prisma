// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  nickname String
  email String @unique
  password String 
  createdAt DateTime @default(now())
  post Post[]
  responses ResponsePost[]
  favs Favorite[]
  likePost LikeVideo[]
}

model Post {
  id Int @id @default(autoincrement())
  content String
  nickname String
  author User @relation(fields: [authorId], references: [id])
  authorId Int 
  createdAt DateTime @default(now())
  videoId String
  responses ResponsePost[]
}

model ResponsePost {
  id Int @id @default(autoincrement()) 
  content String
  nickname String
  author User @relation(fields: [authorId], references: [id])
  authorId Int
  createdAt DateTime @default(now())
  postedBy Post? @relation(fields: [postId], references: [id])
  postId Int?
  response ResponsePost? @relation("ResponseToResponse",fields: [responseId], references: [id])
  responseId Int?
  responses ResponsePost[] @relation("ResponseToResponse")
}

model Favorite {
  id Int @id @default(autoincrement())
  videoId String 
  author User @relation(fields: [authorId], references: [id])
  authorId Int
  createdAt DateTime @default(now())
}

model LikeVideo {
  id Int @id @default(autoincrement())
  videoId String
  like Boolean
  author User @relation(fields: [authorId], references: [id])
  authorId Int
  createdAt DateTime @default(now())
}

model Message {
  id Int @id @default(autoincrement())
  name String
  email String
  message String
  createdAt DateTime @default(now())
}
